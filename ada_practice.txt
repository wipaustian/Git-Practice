with Ada.Text_IO; use Ada.Text_IO;
with Ada.Numerics.Discrete_Random;
procedure Hello is
   type Random_Range is range 0 .. 1000;

   package R is new
     Ada.Numerics.Discrete_Random (Random_Range);
   use R;

   type Index is range 11 .. 15;
   
   G : Generator;

   type My_Int_Array is
     array (Index) of Random_Range;

   Tab :  My_Int_Array :=
           (others => 1);

    Sum : Integer := 0;
begin
   Reset (G);

   for I in Index loop
      Tab(I) := Random (G);
      Sum := Sum + Integer(Tab(I));
   end loop;
   
   Put_Line("Sum of array is" & Integer'Image(Sum));
   
   for I in Index loop
      Put_Line (Random_Range'Image (Tab(I)));
   end loop;
   
end Hello;


with Ada.Text_IO; use Ada.Text_IO;
procedure Hello is
    M: Integer := 0;
begin
   M := Integer'Value(Get_Line);
  declare
    type g is new Integer range 1 .. M;
    type d is array (g range <>) of Integer;
    d1 : d(g'first..g'last) := (others => 2);
   begin 
    Put_Line("Hello, world!" & g'Image(g'first) & g'Image(g'last));
   for I in g'first .. g'last loop
      --  Put_Line is a procedure call
      Put_Line ("Hello, World!"
                  & Integer'Image (d1(I)));
      --        ^ Procedure parameter
   end loop;
   end;
    Put_Line("Hello, world!");
end Hello;


with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Unbounded;
procedure Hello is
package SU   renames Ada.Strings.Unbounded;
type Months is (January, February, March, April,
                May, June, July, August, September,
                October, November, December);
type Date is record
   --  The following declarations are
   --  components of the record
   Day   : Integer range 1 .. 31;
   Month : Months;
   --  You can add custom constraints
   --  on fields
   Year  : Integer range 1 .. 3000;
end record;

procedure Print_Date(D: Date; N: String) is
begin
   Put_Line(N & "'s birthday is " & Months'Image(D.Month) & Integer'(D.Day) & Integer'Image(D.Year));
end Print_Date;


Ada_Birthday    : Date := (10, December, 1815);
begin
  Put_Line("Hello, world!");
  Print_Date(Ada_Birthday, "Ada Lovelace");
end Hello;


with Ada.Text_IO; use Ada.Text_IO;
procedure Hello is
   type Index is range 1 .. 5;
   type My_Int is range 0 .. 1000;
   type My_Int_Array is
     array (Index) of My_Int;

   Arr : My_Int_Array;
   cnt : Index := Index'first;
   Int : Integer;

begin
   while Integer(cnt) /= Integer(Index'last) loop
       Put_Line("Add a number.");
      Int := Integer'Value(Get_Line);
      if (Int >= Integer(My_Int'first) and Int <= Integer(My_Int'Last)) then
          Arr(cnt) := My_Int(Int);
          cnt := cnt + 1;
      end if;
   end loop;
   
   Put_Line("End of loop");

end Hello;

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
procedure Hello is
    
    type Bool is (False, True);

    function isNumber
      (Str : Unbounded_String) return Bool is
    begin
       for J in 1 .. Length (Str) loop
          if  Element (Str, J) < '0' or  Element (Str, J) > '9' then
             return False;
          end if;
       end loop;
       return True;
    end isNumber;
    
    A : Unbounded_String := To_Unbounded_String("");
    
begin
  Put_Line(To_String(A) & " being a number is " & Bool'Image(IsNumber(A)));
  Put_Line("Hello, world!");
end Hello;

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
procedure Hello is

    function isNumber
      (Str : Unbounded_String; ch : out Character) return Boolean is
    begin
       for J in 1 .. Length (Str) loop
          if  Element (Str, J) < '0' or  Element (Str, J) > '9' then
             ch := Element(Str, J);
             return False;
          end if;
       end loop;
       ch := Character'Val(0);
       return True;
    end isNumber;

    A : Unbounded_String;
    ch : Character;

begin
  Put_Line("Type number:");
  A := To_Unbounded_String(Get_Line);

  Put_Line(To_String(A) & " being a number is " & Boolean'Image(IsNumber(A, ch)));
  if ch /= Character'Val(0) then
      Put_Line("A character that is not a number is : " & ch);
  end if;

  Put_Line("Hello, world!");
end Hello;